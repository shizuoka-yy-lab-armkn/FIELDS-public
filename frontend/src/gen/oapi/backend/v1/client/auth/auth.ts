/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * FIELDS Backend API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation } from "@tanstack/react-query";
import type { MutationFunction, UseMutationOptions } from "@tanstack/react-query";
import { customAxios } from "../../../../../../config/orval/backend";
import type { BodyType, ErrorType } from "../../../../../../config/orval/backend";
import type { HTTPValidationError, LoginReq, Token } from "../../schema";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any ? P
  : never;

/**
 * @summary Login
 */
export const login = (
  loginReq: BodyType<LoginReq>,
  options?: SecondParameter<typeof customAxios>,
) => {
  return customAxios<Token>(
    { url: `/api/v1/auth/token`, method: "post", headers: { "Content-Type": "application/json" }, data: loginReq },
    options,
  );
};

export const getLoginMutationOptions = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof login>>, TError, { data: BodyType<LoginReq> }, TContext>;
    request?: SecondParameter<typeof customAxios>;
  },
): UseMutationOptions<Awaited<ReturnType<typeof login>>, TError, { data: BodyType<LoginReq> }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof login>>, { data: BodyType<LoginReq> }> = (props) => {
    const { data } = props ?? {};

    return login(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>;
export type LoginMutationBody = BodyType<LoginReq>;
export type LoginMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Login
 */
export const useLogin = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof login>>, TError, { data: BodyType<LoginReq> }, TContext>;
    request?: SecondParameter<typeof customAxios>;
  },
) => {
  const mutationOptions = getLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
