/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * Proficiv Backend API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "@tanstack/react-query";
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from "@tanstack/react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type { PingResponse } from "../../schema";

/**
 * @summary ÁñéÈÄöÁ¢∫Ë™çAPI
 */
export const ping = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PingResponse>> => {
  return axios.get(
    `/api/v1/debug/ping`,
    options,
  );
};

export const getPingQueryKey = () => {
  return [`/api/v1/debug/ping`] as const;
};

export const getPingQueryOptions = <TData = Awaited<ReturnType<typeof ping>>, TError = AxiosError<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPingQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ping>>> = ({ signal }) =>
    ping({ ...(signal ? { signal } : {}), ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type PingQueryResult = NonNullable<Awaited<ReturnType<typeof ping>>>;
export type PingQueryError = AxiosError<unknown>;

/**
 * @summary ÁñéÈÄöÁ¢∫Ë™çAPI
 */
export const usePing = <TData = Awaited<ReturnType<typeof ping>>, TError = AxiosError<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getPingQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
