/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * Proficiv Backend API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "@tanstack/react-query";
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from "@tanstack/react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type { HTTPValidationError, ISubjectDetail } from "../../schema";

/**
 * @summary Get Subject
 */
export const getSubject = (
  subjectId: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ISubjectDetail>> => {
  return axios.get(
    `/api/v1/subjects/${subjectId}`,
    options,
  );
};

export const getGetSubjectQueryKey = (subjectId: number) => {
  return [`/api/v1/subjects/${subjectId}`] as const;
};

export const getGetSubjectQueryOptions = <
  TData = Awaited<ReturnType<typeof getSubject>>,
  TError = AxiosError<HTTPValidationError>,
>(
  subjectId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubject>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSubjectQueryKey(subjectId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSubject>>> = ({ signal }) =>
    getSubject(subjectId, { ...(signal ? { signal } : {}), ...axiosOptions });

  return { queryKey, queryFn, enabled: !!subjectId, ...queryOptions } as
    & UseQueryOptions<Awaited<ReturnType<typeof getSubject>>, TError, TData>
    & { queryKey: QueryKey };
};

export type GetSubjectQueryResult = NonNullable<Awaited<ReturnType<typeof getSubject>>>;
export type GetSubjectQueryError = AxiosError<HTTPValidationError>;

/**
 * @summary Get Subject
 */
export const useGetSubject = <TData = Awaited<ReturnType<typeof getSubject>>, TError = AxiosError<HTTPValidationError>>(
  subjectId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubject>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSubjectQueryOptions(subjectId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
