/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * Proficiv Backend API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "@tanstack/react-query";
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from "@tanstack/react-query";
import { customAxios } from "../../../../../../config/orval/backend";
import type { ErrorType } from "../../../../../../config/orval/backend";
import type { HTTPValidationError, Subject } from "../../schema";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any ? P
  : never;

/**
 * @summary Get Subject
 */
export const getSubject = (
  subjectId: string,
  options?: SecondParameter<typeof customAxios>,
  signal?: AbortSignal,
) => {
  return customAxios<Subject>(
    { url: `/api/v1/subjects/${subjectId}`, method: "get", ...(signal ? { signal } : {}) },
    options,
  );
};

export const getGetSubjectQueryKey = (subjectId: string) => {
  return [`/api/v1/subjects/${subjectId}`] as const;
};

export const getGetSubjectQueryOptions = <
  TData = Awaited<ReturnType<typeof getSubject>>,
  TError = ErrorType<HTTPValidationError>,
>(
  subjectId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubject>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSubjectQueryKey(subjectId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSubject>>> = ({ signal }) =>
    getSubject(subjectId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!subjectId, ...queryOptions } as
    & UseQueryOptions<Awaited<ReturnType<typeof getSubject>>, TError, TData>
    & { queryKey: QueryKey };
};

export type GetSubjectQueryResult = NonNullable<Awaited<ReturnType<typeof getSubject>>>;
export type GetSubjectQueryError = ErrorType<HTTPValidationError>;

/**
 * @summary Get Subject
 */
export const useGetSubject = <TData = Awaited<ReturnType<typeof getSubject>>, TError = ErrorType<HTTPValidationError>>(
  subjectId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubject>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSubjectQueryOptions(subjectId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
