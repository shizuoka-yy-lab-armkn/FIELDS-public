/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * Proficiv Backend API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "@tanstack/react-query";
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from "@tanstack/react-query";
import { customInstance } from "../../../../../../config/orval/backend";
import type { ErrorType } from "../../../../../../config/orval/backend";
import type { HTTPValidationError, IEvaluation, IRecord } from "../../schema";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any ? P
  : never;

/**
 * @summary List Records
 */
export const listRecords = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<IRecord[]>(
    { url: `/api/v1/records`, method: "get", ...(signal ? { signal } : {}) },
    options,
  );
};

export const getListRecordsQueryKey = () => {
  return [`/api/v1/records`] as const;
};

export const getListRecordsQueryOptions = <
  TData = Awaited<ReturnType<typeof listRecords>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listRecords>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListRecordsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listRecords>>> = ({ signal }) =>
    listRecords(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as
    & UseQueryOptions<Awaited<ReturnType<typeof listRecords>>, TError, TData>
    & { queryKey: QueryKey };
};

export type ListRecordsQueryResult = NonNullable<Awaited<ReturnType<typeof listRecords>>>;
export type ListRecordsQueryError = ErrorType<unknown>;

/**
 * @summary List Records
 */
export const useListRecords = <TData = Awaited<ReturnType<typeof listRecords>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listRecords>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListRecordsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Evaluation
 */
export const getEvaluation = (
  recordId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<IEvaluation>(
    { url: `/api/v1/records/${recordId}/evaluation`, method: "get", ...(signal ? { signal } : {}) },
    options,
  );
};

export const getGetEvaluationQueryKey = (recordId: number) => {
  return [`/api/v1/records/${recordId}/evaluation`] as const;
};

export const getGetEvaluationQueryOptions = <
  TData = Awaited<ReturnType<typeof getEvaluation>>,
  TError = ErrorType<HTTPValidationError>,
>(
  recordId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvaluation>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEvaluationQueryKey(recordId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEvaluation>>> = ({ signal }) =>
    getEvaluation(recordId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!recordId, ...queryOptions } as
    & UseQueryOptions<Awaited<ReturnType<typeof getEvaluation>>, TError, TData>
    & { queryKey: QueryKey };
};

export type GetEvaluationQueryResult = NonNullable<Awaited<ReturnType<typeof getEvaluation>>>;
export type GetEvaluationQueryError = ErrorType<HTTPValidationError>;

/**
 * @summary Get Evaluation
 */
export const useGetEvaluation = <
  TData = Awaited<ReturnType<typeof getEvaluation>>,
  TError = ErrorType<HTTPValidationError>,
>(
  recordId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvaluation>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEvaluationQueryOptions(recordId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
