/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * Proficiv Backend API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "@tanstack/react-query";
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from "@tanstack/react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type { HTTPValidationError, IEvaluation, IRecord } from "../../schema";

/**
 * @summary List Records
 */
export const listRecords = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<IRecord[]>> => {
  return axios.get(
    `/api/v1/records`,
    options,
  );
};

export const getListRecordsQueryKey = () => {
  return [`/api/v1/records`] as const;
};

export const getListRecordsQueryOptions = <
  TData = Awaited<ReturnType<typeof listRecords>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listRecords>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListRecordsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listRecords>>> = ({ signal }) =>
    listRecords({ ...(signal ? { signal } : {}), ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as
    & UseQueryOptions<Awaited<ReturnType<typeof listRecords>>, TError, TData>
    & { queryKey: QueryKey };
};

export type ListRecordsQueryResult = NonNullable<Awaited<ReturnType<typeof listRecords>>>;
export type ListRecordsQueryError = AxiosError<unknown>;

/**
 * @summary List Records
 */
export const useListRecords = <TData = Awaited<ReturnType<typeof listRecords>>, TError = AxiosError<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listRecords>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListRecordsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Evaluation
 */
export const getEvaluation = (
  recordId: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<IEvaluation>> => {
  return axios.get(
    `/api/v1/records/${recordId}/evaluation`,
    options,
  );
};

export const getGetEvaluationQueryKey = (recordId: number) => {
  return [`/api/v1/records/${recordId}/evaluation`] as const;
};

export const getGetEvaluationQueryOptions = <
  TData = Awaited<ReturnType<typeof getEvaluation>>,
  TError = AxiosError<HTTPValidationError>,
>(
  recordId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvaluation>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEvaluationQueryKey(recordId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEvaluation>>> = ({ signal }) =>
    getEvaluation(recordId, { ...(signal ? { signal } : {}), ...axiosOptions });

  return { queryKey, queryFn, enabled: !!recordId, ...queryOptions } as
    & UseQueryOptions<Awaited<ReturnType<typeof getEvaluation>>, TError, TData>
    & { queryKey: QueryKey };
};

export type GetEvaluationQueryResult = NonNullable<Awaited<ReturnType<typeof getEvaluation>>>;
export type GetEvaluationQueryError = AxiosError<HTTPValidationError>;

/**
 * @summary Get Evaluation
 */
export const useGetEvaluation = <
  TData = Awaited<ReturnType<typeof getEvaluation>>,
  TError = AxiosError<HTTPValidationError>,
>(
  recordId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvaluation>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEvaluationQueryOptions(recordId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
