/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * Proficiv Backend API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "@tanstack/react-query";
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from "@tanstack/react-query";
import { customAxios } from "../../../../../../config/orval/backend";
import type { ErrorType } from "../../../../../../config/orval/backend";
import type { HTTPValidationError, Record, RecordEvaluation } from "../../schema";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any ? P
  : never;

/**
 * @summary Get Record List
 */
export const getRecordList = (
  options?: SecondParameter<typeof customAxios>,
  signal?: AbortSignal,
) => {
  return customAxios<Record[]>(
    { url: `/api/v1/records`, method: "get", ...(signal ? { signal } : {}) },
    options,
  );
};

export const getGetRecordListQueryKey = () => {
  return [`/api/v1/records`] as const;
};

export const getGetRecordListQueryOptions = <
  TData = Awaited<ReturnType<typeof getRecordList>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecordList>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRecordListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRecordList>>> = ({ signal }) =>
    getRecordList(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as
    & UseQueryOptions<Awaited<ReturnType<typeof getRecordList>>, TError, TData>
    & { queryKey: QueryKey };
};

export type GetRecordListQueryResult = NonNullable<Awaited<ReturnType<typeof getRecordList>>>;
export type GetRecordListQueryError = ErrorType<unknown>;

/**
 * @summary Get Record List
 */
export const useGetRecordList = <TData = Awaited<ReturnType<typeof getRecordList>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecordList>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRecordListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Record
 */
export const getRecord = (
  recordId: string,
  options?: SecondParameter<typeof customAxios>,
  signal?: AbortSignal,
) => {
  return customAxios<Record>(
    { url: `/api/v1/records/${recordId}`, method: "get", ...(signal ? { signal } : {}) },
    options,
  );
};

export const getGetRecordQueryKey = (recordId: string) => {
  return [`/api/v1/records/${recordId}`] as const;
};

export const getGetRecordQueryOptions = <
  TData = Awaited<ReturnType<typeof getRecord>>,
  TError = ErrorType<HTTPValidationError>,
>(
  recordId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecord>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRecordQueryKey(recordId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRecord>>> = ({ signal }) =>
    getRecord(recordId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!recordId, ...queryOptions } as
    & UseQueryOptions<Awaited<ReturnType<typeof getRecord>>, TError, TData>
    & { queryKey: QueryKey };
};

export type GetRecordQueryResult = NonNullable<Awaited<ReturnType<typeof getRecord>>>;
export type GetRecordQueryError = ErrorType<HTTPValidationError>;

/**
 * @summary Get Record
 */
export const useGetRecord = <TData = Awaited<ReturnType<typeof getRecord>>, TError = ErrorType<HTTPValidationError>>(
  recordId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecord>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRecordQueryOptions(recordId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Evaluation
 */
export const getEvaluation = (
  recordId: string,
  options?: SecondParameter<typeof customAxios>,
  signal?: AbortSignal,
) => {
  return customAxios<RecordEvaluation>(
    { url: `/api/v1/records/${recordId}/evaluation`, method: "get", ...(signal ? { signal } : {}) },
    options,
  );
};

export const getGetEvaluationQueryKey = (recordId: string) => {
  return [`/api/v1/records/${recordId}/evaluation`] as const;
};

export const getGetEvaluationQueryOptions = <
  TData = Awaited<ReturnType<typeof getEvaluation>>,
  TError = ErrorType<HTTPValidationError>,
>(
  recordId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvaluation>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEvaluationQueryKey(recordId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEvaluation>>> = ({ signal }) =>
    getEvaluation(recordId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!recordId, ...queryOptions } as
    & UseQueryOptions<Awaited<ReturnType<typeof getEvaluation>>, TError, TData>
    & { queryKey: QueryKey };
};

export type GetEvaluationQueryResult = NonNullable<Awaited<ReturnType<typeof getEvaluation>>>;
export type GetEvaluationQueryError = ErrorType<HTTPValidationError>;

/**
 * @summary Get Evaluation
 */
export const useGetEvaluation = <
  TData = Awaited<ReturnType<typeof getEvaluation>>,
  TError = ErrorType<HTTPValidationError>,
>(
  recordId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvaluation>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEvaluationQueryOptions(recordId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
